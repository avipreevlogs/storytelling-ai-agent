name: Daily 4 Storytelling Videos  # Automated storytelling for YouTube

on:
  schedule:
    - cron: "0 */6 * * *"  # Runs every 6 hours (4x daily: 00:00, 06:00, 12:00, 18:00 UTC)
  workflow_dispatch:  # Manual trigger button for testing

jobs:
  build-and-run:
    runs-on: ubuntu-latest
    timeout-minutes: 30  # Prevent runaway jobs (adjust based on script runtime)

    steps:
      # Step 1: Securely checkout the repo code
      - name: Checkout Repository
        uses: actions/checkout@v4  # Latest version for security and speed

      # Step 2: Set up Python environment
      - name: Set Up Python
        uses: actions/setup-python@v5  # Latest version with better caching
        with:
          python-version: "3.10"

      # Step 3: Cache dependencies for faster runs (impressive optimization!)
      - name: Cache Python Dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # Step 4: Install dependencies with validation
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          if [ ! -f requirements.txt ]; then
            echo "Error: requirements.txt not found in repo. Please add it."
            exit 1
          fi
          pip install -r requirements.txt
        continue-on-error: false  # Fail immediately if install breaks

      # Step 5: Verify script and secrets (prevents runtime surprises)
      - name: Validate Setup
        run: |
          if [ ! -f storyteller_youtube_agent.py ]; then
            echo "Error: storyteller_youtube_agent.py not found."
            exit 1
          fi
          if [ -z "$OPENAI_API_KEY" ] || [ -z "$GOOGLE_CLIENT_SECRET" ] || [ -z "$YOUTUBE_CHANNEL_ID" ]; then
            echo "Error: One or more required secrets are missing in GitHub Secrets."
            exit 1
          fi
          echo "Setup validated successfully!"
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          YOUTUBE_CHANNEL_ID: ${{ secrets.YOUTUBE_CHANNEL_ID }}

      # Step 6: Run the storytelling script with retries (handles API flakiness)
      - name: Run Storytelling Automation
        uses: nick-invision/retry@v3  # Retry up to 3 times on failure
        with:
          timeout_minutes: 20
          max_attempts: 3
          command: |
            echo "Starting storytelling automation at $(date)..."
            python storyteller_youtube_agent.py
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          YOUTUBE_CHANNEL_ID: ${{ secrets.YOUTUBE_CHANNEL_ID }}
        continue-on-error: true  # Log failure but don't stop workflow

      # Step 7: Notify on failure (impressive: proactive monitoring)
      - name: Notify on Failure
        if: failure()
        uses: 8398a7/action-slack@v3  # Sends Slack message (optional; requires SLACK_WEBHOOK_URL secret)
        with:
          status: failure
          text: "GitHub Actions failed for Daily Storytelling Videos. Check logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}  # Add this secret if using Slack